type Person {
  personId: String
  first_name: String
  last_name: String
}
type Review {
  reviewId: String
  rating:String
  text: String
  restaurantId: String
  created_date:String
}
type Cusine {
  cusineId: String
  name: String
  restaurantId: String
}
type Restaurant {
  name: String
  restaurantId: String
  address:String
}

input inputPerson {
  personId: String
  first_name: String
  last_name: String
}
input inputReview {
  reviewId: String
  rating:String
  text: String
  restaurantId: String
  created_date:String
  personId: String
}
input inputCusine {
  cusineId: String
  name: String
  restaurantId: String
}
input inputRestaurant {
  name: String
  restaurantId: String
  address:String
}

input cusineInRestaurant{
cusineId: String
restaurantId: String
}

input City {
name: String
}

type Query {

  friends(personID: String): [Person]
  fiendsoffriends(personID: String):[Person]
  userAssociated(personID:String,personIdTwo:String):Boolean
  highestRatedCusine(personID:String):[Restaurant]
  topRestaurant:[Restaurant]
  latestReview(restaurantId:String):[Review]


  }

type Mutation{

  addPerson (addPer:inputPerson):Person 
  addReview (addRev:inputReview):Review 
  addCusine (addCus:inputCusine):Cusine 
  addRestaurant (addREst:inputRestaurant):Restaurant 
  addFriends(personID: String,personTwoId: String):Person

  
  personInCity(pCity:City): String
  restaurntInCity(rCity:City): String

}
schema{
query: Query,
mutation: Mutation
}