type Person {
  personId: String
  first_name: String
  last_name: String
  city:String
}
type Review {
  reviewId: String
  rating: String
  text: String
  restaurantId: String
  created_date: String
}
type Cusine {
  cusineId: String
  name: String
  restaurantId: String
}
type Restaurant {
  name: String
  restaurantId: String
  city: String
}

input inputPerson {
  personId: String
  first_name: String
  last_name: String
  city: String
}
input inputReview {
  reviewId: String
  rating: String
  text: String
  restaurantId: String
  created_date: String
  personId: String
}
input inputCusine {
  cusineId: String
  name: String
  restaurantId: String
}
input inputRestaurant {
  name: String
  restaurantId: String
  city: String
}

input cusineInRestaurant {
  cusineId: String
  restaurantId: String
}
type City{
name: String
}
input city{
name: String
}

type Query {
  friends(personID: String): [Person]

  fiendsoffriends(personID: String): [Person]
  userAssociated(personID: String, personIdTwo: String): String


  specificCusineHighestRate(personID: String,cusineID: String):[Cusine]
  highestRatedCusine(personID: String): [Cusine]
  
  latestReview(restaurantId: String): [Review]
  
  frindsRecommend(personID: String): [Restaurant]
  pastXDays(personID: String):[Review]
}

type Mutation {
  addPerson(addPer: inputPerson): [Person]
  addReview(addRev: inputReview): [Review]
  addCusine(addCus: inputCusine): [Cusine]
  addRestaurant(addREst: inputRestaurant): Restaurant

  addFriends(personID: String, personTwoId: String): Person
  
  addCity(addC: city):City
}
schema {
  query: Query
  mutation: Mutation
}
